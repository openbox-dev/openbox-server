generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MAIN TABLES
model User {
  id           Int            @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String         @unique
  discord      String?        @unique
  contactEmail String?        @unique
  // password String
  promo        User_promotion
  role         User_role[]    @default([STUDENT])

  // Relations
  authentification Authentification[]  @relation(name: "UserToAuthentication")
  newsletter       Newsletter[]        @relation(name: "UserToNewsletter")
  boxAdmin         Box_admin[]         @relation(name: "UserToBoxAdmin")
  boxFollower      Box_follower[]      @relation(name: "UserToBoxFollower")
  eventParticipant Event_participant[] @relation(name: "UserToEventParticipant")
}

model Authentification {
  userId      Int @unique
  agent       String
  token       String   @unique @id
  tokenStart  DateTime @default(now())
  tokenEnd    DateTime

  // Relations
  user User @relation(name: "UserToAuthentication", fields: [userId], references: [id])

  @@id([userId, agent])
}

model Newsletter {
  id        Int                    @id @default(autoincrement())
  writerId  Int
  title     String
  image     String
  heading   String
  content   String
  status    Newsletter_status      @default(VISIBLE)
  createdAt  DateTime @default(now()) @db.Date

  // Relations
  user      User                   @relation(name: "UserToNewsletter", fields: [writerId], references: [id])
  ressource Newsletter_ressource[] @relation(name: "NewsletterToRessource")
}

model Newsletter_ressource {
  id           Int    @id @default(autoincrement())
  newsletterId Int
  url          String

  // Relations
  newslettter Newsletter @relation(name: "NewsletterToRessource", fields: [newsletterId], references: [id])
}

model Box {
  id          Int        @id @default(autoincrement())
  status      Box_status @default(PENDING)
  name        String
  description String
  image       String?
  
  createdAt  DateTime @default(now())
  // Relations
  boxAdmin    Box_admin[]    @relation(name: "BoxToBoxAdmin")
  boxFollower Box_follower[] @relation(name: "BoxToBoxFollower")
  event       Event[]        @relation(name: "BoxToEvent")
}

model Event {

  id               Int                 @id @default(autoincrement())
  boxId            Int
  name             String
  description      String
  image            String?
  conference_link  String?
  room             Event_room?
  status           Event_status        @default(PENDING)
  startDate        DateTime
  endDate          DateTime?

  // Relations
  box              Box                 @relation(name: "BoxToEvent", fields: [boxId], references: [id])
  eventParticipant Event_participant[] @relation(name: "EventToEventParticipant")
  eventAnimator    Event_animator[]    @relation(name: "EventToEventAnimator")
  eventRessource   Event_ressource[]   @relation(name: "EventToEventRessource")
  eventFeedback    Event_feedback[]    @relation(name: "EventToEventFeedback")
}

model Event_ressource {
  id      Int    @id @default(autoincrement())
  eventId Int
  url     String

  // Relations
  event Event @relation(name: "EventToEventRessource", fields: [eventId], references: [id])
}

model Animator {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  email     String? @unique
  picture   String?
  linkedIn  String? @unique
  discord   String? @unique
  twitter   String? @unique
  website   String?

  // Relations
  eventAnimator Event_animator[] @relation(name: "AnimatorToEventAnimator")
}

model Feedback {
  id            Int              @id @default(autoincrement())
  eventId       Int
  writerId      Int
  content       String

  // Relations
  eventFeedback Event_feedback[] @relation(name: "FeedbackToEventFeedback")
}

// JOIN TABLES
model Box_admin {
  boxId  Int
  userId Int

  // Relations
  box  Box  @relation(name: "BoxToBoxAdmin", fields: [boxId], references: [id])
  user User @relation(name: "UserToBoxAdmin", fields: [userId], references: [id])

  @@id([boxId, userId])
}

model Box_follower {
  boxId    Int
  userId   Int
  status   Box_follower_status?
  notified Boolean              @default(false)

  // Relations
  box  Box  @relation(name: "BoxToBoxFollower", fields: [boxId], references: [id])
  user User @relation(name: "UserToBoxFollower", fields: [userId], references: [id])

  @@id([boxId, userId])
}

model Event_participant {
  userId  Int
  eventId Int
  status  Event_participant_status

  // Relations
  user  User  @relation(name: "UserToEventParticipant", fields: [userId], references: [id])
  event Event @relation(name: "EventToEventParticipant", fields: [eventId], references: [id])

  @@id([userId, eventId])
}

model Event_animator {
  animatorId Int
  eventId    Int

  // Relations
  animator Animator @relation(name: "AnimatorToEventAnimator", fields: [animatorId], references: [id])
  event    Event    @relation(name: "EventToEventAnimator", fields: [eventId], references: [id])

  @@id([animatorId, eventId])
}

model Event_feedback {
  feedbackId Int
  eventId    Int

  @@id ([feedbackId, eventId])

  // Relations
  feedback   Feedback @relation(name: "FeedbackToEventFeedback", fields: [feedbackId], references: [id])
  event      Event    @relation(name: "EventToEventFeedback", fields: [eventId], references: [id])
}

// ENUMS
enum User_role {
  STUDENT
  ANIMATOR
  MEDIATOR
}

enum User_promotion {
  ALUMNI
  DATA1
  DATA2
  DATA3
  H1
  H2
  H3
  H4
  H5
  MASTERCTO1
  MASTERCTO2
  MASTERCYBERSECURITE1
  MASTERCYBERSECURITE2
  MASTERDATA1
  MASTERDATA2
  MASTERPM1
  MASTERPM2
  MASTERWEBMARKETING1
  MASTERWEBMARKETING2
  PREPAMD
  WEB1
  WEB2
  WEB3
  WEBMARKETING1
  WEBMARKETING2
  WEBMARKETING3
}

enum Newsletter_status {
  VISIBLE
  HIDDEN
}

enum Box_status {
  ACCEPTED
  PENDING
  REFUSED
  STOPPED
}

enum Box_follower_status {
  INTERESTED
  NOT_INTERESTED
}

enum Event_participant_status {
  PRESENT
  MAYBE
  NOT_PRESENT
}

enum Event_room {
  TO_DEFINE
  ONLINE
  AMPHI
  A001
  A002
  A003
  A004
  A005
  A006
  A007
  A008
  A009
  A010
  A101
  A102
  A103
  A104
  A105
  A106
  A107
  A108
  A109
  A110
  A201
  A202
  A203
  A204
  A205
  A206
  A207
  A208
  A209
  A210
  B001
  B002
  B003
  B004
  B005
  B006
  B007
  B008
  B009
  B010
  B101
  B102
  B103
  B104
  B105
  B106
  B107
  B108
  B109
  B110
  B201
  B202
  B203
  B204
  B205
  B206
  B207
  B208
  B209
  B210
  C001
  C002
  C003
  C004
  C005
  C006
  C007
  C008
  C009
  C010
  C101
  C102
  C103
  C104
  C105
  C106
  C107
  C108
  C109
  C110
  C201
  C202
  C203
  C204
  C205
  C206
  C207
  C208
  C209
  C210
}

enum Event_status {
  PENDING
  CANCELLED
  PASSED
  SOON
  NOW
  STREAMED
}
